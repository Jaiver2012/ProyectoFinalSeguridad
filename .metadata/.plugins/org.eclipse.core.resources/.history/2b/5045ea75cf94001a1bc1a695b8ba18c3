package cliente;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Scanner;

import javax.crypto.KeyAgreement;

public class Cliente {

	//Datos conexión
	
	private int port=9000;
	private String ip="192.168.56.1";
	private Socket client;
    private DataOutputStream salida;
    private DataOutputStream pathFile;
    private DataInputStream entrada;
    private String[] mensajeRecibido;
    private Scanner teclado;
    
    
    //Datos para el intercambio de claves  (diffie-hellman)
	
    private PrivateKey privateKey;
    private PublicKey  publicKey;
    private PublicKey  receivedPublicKey;
    private byte[]     secretKey;
    private String     secretMessage;
	
	
	public static void main(String[] args) {
		Cliente nuevoCliente = new Cliente();
		nuevoCliente.generateKeys();
		nuevoCliente.iniciarCliente();
	}

	private void iniciarCliente() {
		
		teclado = new Scanner(System.in);
        try{
        	client= new Socket(ip,port);
            salida = new DataOutputStream(client.getOutputStream());
            entrada = new DataInputStream(client.getInputStream());
            
           
        
         
          //----------
            String msn = "";
            while(!msn.equals("x")){
                System.out.println("Escriba el nombre del archivo para iniciar");
                msn = teclado.nextLine();
                
                if(!msn.contentEquals("")) {
                	
                	//convertir publicKey del cliente a byte            
                	byte[] byte_pubkey = publicKey.getEncoded();

                	//convertir byte a String 
                	String publicKeyString = Base64.getEncoder().encodeToString(byte_pubkey);
           
                	//Enviamos la publickey convertida en string al servidor
                	salida.writeUTF("1-" + publicKeyString+"-"+msn);
                
                	
                }
             
                mensajeRecibido = entrada.readUTF().split("-");
            	
            	if(mensajeRecibido[0].equals("1")) {
            		//Recibimos la clave publica del cliente
            		receivePublicKeyFrom(mensajeRecibido[1]);
            		generateCommonSecretKey();
            		
            		// Hasta aqui lo que se ha hecho es generar una clave secreta en común
            		System.out.println("Clave secreta en común en el cliente: " + Base64.getEncoder().encodeToString(secretKey));
            	}
              
            }
            client.close();
        }catch(Exception e){
 
        }
	}
	
	public void makeFile() {
		 //recibir el archivo
        ObjectOutputStream oos = new ObjectOutputStream(client.getOutputStream());
        MessageRecieveFile mensaje = new MessageRecieveFile();
        mensaje.nombreFichero = "fichero";
        oos.writeObject(mensaje);
        
		 // Puesto que servidor y cliente van a correr en local, para evitar machacer el fichero original,
        // se le añade el apellido "_copia".
        FileOutputStream fos = new FileOutputStream(mensaje.nombreFichero+ "_copia");

        // Se crea un ObjectInputStream del socket para leer los mensajes que contienen el fichero.
        ObjectInputStream ois = new ObjectInputStream(client.getInputStream());
           
        
		
		do
		{
		    // Se lee el mensaje en una variabla auxiliar
		    Object mensajeAux = ois.readObject();
		               
		    // Si es del tipo esperado, se trata
		   
		        mensajeRecibido = (MessageRecieveFile) mensajeAux;
		        // Se escribe en pantalla y en el fichero
		        System.out.print(new String(
		             mensajeRecibido.contenidoFichero, 0,
		             mensajeRecibido.bytesValidos));
		         fos.write(mensajeRecibido.contenidoFichero, 0,
		             mensajeRecibido.bytesValidos);
		     
		  
		} while (!mensajeRecibido.ultimoMensaje);
	}
	
	public void generateKeys() {
		try {
			
			final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DH");
	        keyPairGenerator.initialize(1024);

	        final KeyPair keyPair = keyPairGenerator.generateKeyPair();

	        privateKey = keyPair.getPrivate();
	        publicKey  = keyPair.getPublic();
	    } 
		catch (Exception e) {
	       e.printStackTrace();
	    }
	}
	
	public void receivePublicKeyFrom(String mensajeRecibido2) throws InvalidKeySpecException, NoSuchAlgorithmException {
		
		byte[] publicBytes = Base64.getDecoder().decode(mensajeRecibido2);
	    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
	    KeyFactory keyFactory = KeyFactory.getInstance("DH");
	    receivedPublicKey = keyFactory.generatePublic(keySpec);
    }

	public void generateCommonSecretKey() {

        try {
            final KeyAgreement keyAgreement = KeyAgreement.getInstance("DH");
            keyAgreement.init(privateKey);
            keyAgreement.doPhase(receivedPublicKey, true);

            secretKey = shortenSecretKey(keyAgreement.generateSecret());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

	private byte[] shortenSecretKey(final byte[] longKey) {

        try {
            final byte[] shortenedKey = new byte[8];

            System.arraycopy(longKey, 0, shortenedKey, 0, shortenedKey.length);

            return shortenedKey;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

}
